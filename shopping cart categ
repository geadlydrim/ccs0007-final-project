#include <iostream>
#include <string>
#include <iomanip>
#include <type_traits>
#include <sstream>

struct StoreItems{	//This structure will contain information of store's products (item #, name of item, price of item)
	int itemNumber;
	std::string itemName;
	std::string category;
	double price;
	static int storeNumItems;
	
	StoreItems(): itemName(""), price(0), category("") {}		/*Default constructor. When a StoreItems structure is declared without initialization,
												  these will be the default values. See figure 1*/ 

	StoreItems(int itemNum, std::string name, std::string categoryName, double cost): itemNumber(itemNum), itemName(name), category(categoryName), price(cost){
		storeNumItems++;
	}
										/*Another constructor, but needs arguments to input values. See figure 2*/
};

int StoreItems::storeNumItems = 0;

struct CustomerItems {	//This will be the node structure for the linked list of items 
	StoreItems cartItems;	//Data value
	int itemNum;
	CustomerItems* next;	//Pointer address
	CustomerItems* previous;

	static int counter;

	CustomerItems(StoreItems* storeItems) : cartItems(*storeItems), next(NULL), previous(NULL){
		counter++;
		itemNum = counter;
	}

								//To create a new node, a storeItem should be passed as an argument, then assign the storeItem as cartItem (data value)
};							//See figure 3.

int CustomerItems::counter = 0;

struct CustomerCart{	//Structure that will represent a customer cart. This struct will contain the linked list aka nodes of items
	CustomerItems* head;		//Create a head node
	CustomerCart() : head(NULL){}	//Default constructor. Creating a new cart initializes the head node to point to null

	void addToCart(StoreItems* storeItems){		//To call this function, a store item must be passed as argument
		CustomerItems* newItem = new CustomerItems(storeItems);		//Figure 3.
		if (head == NULL){		//Checks if head is pointing to null. If true, it means that the new node is the first node in the list
			head = newItem;		//Points the head to the very first added node.
		}
		else{		//If there is nodes already, add the new node at the last of the list
			CustomerItems* temp = head;		//Create a temp node pointing to head for traversing
			while(temp->next != NULL){		//Checks if the current node is the last node in the list
				temp = temp->next;			//If not, set the next node as current node
			}
			temp->next = newItem;	//When the temp reaches last node, point the last node's next pointer to the newly added node
		}
	}

	void updateItemOrder(CustomerItems* current){
		CustomerItems* temp = current->next;
		while(temp != NULL){
			temp->itemNum--;
			temp = temp->next;
		}
		CustomerItems::counter--;
	}
	void removeFromCart(int itemNO) {
		if (head == NULL) {
			std::cout << "Your cart is empty.\n";
			return;
		}

		if (head->itemNum == itemNO) {
			CustomerItems* temp = head;
			head = head->next;
			temp->next = head;
			updateItemOrder(temp);
			delete temp;
			
			std::cout << "Item successfully removed from cart.\n";
			return;
		}

		CustomerItems* current = head;
		while (current->next != NULL && current->next->itemNum != itemNO) {
			current = current->next;

			if (current->next == NULL) {
				std::cout << "Item is not in cart.\n";
				return;
			}
		}

		CustomerItems* temp = current->next;
		current->next = current->next->next;
		delete temp;
		updateItemOrder(current);
		std::cout << "Item successfuly removed from cart.\n";
}

	void viewCart() {
		CustomerItems* temp = head;

		if (temp == NULL) {
			std::cout << "Your cart is empty.\n";
		} 
		else {
			std::cout << std::setw(9) << "Item #" << std::setw(20) << std::left << "Category" << std::setw(25) << std::left << "Item Name" << std::setw(10) << "Price" << '\n';
			std::cout << std::setfill('=') << std::setw(40) << "=" << std::setfill(' ') << '\n';

			while (temp != NULL) {
				std::cout << std::setw(6) << std::right << temp->itemNum << " | "  << std::setw(20) << std::left << temp->cartItems.category << " | " << std::setw(25) << std::left << temp->cartItems.itemName << "$ " << temp->cartItems.price << '\n';
				temp = temp->next;
			}

			std::cout << std::setfill('=') << std::setw(40) << "=" << std::setfill(' ') << '\n';
			std::cout << std::setw(30) << std::left << "Total: " << '$' << std::fixed << std::setprecision(2) << computeTotal() << '\n';
		}
	}
	
	double computeTotal(){
		double totalPrice;
		CustomerItems* temp = head;
		while(temp != NULL){
			totalPrice += temp->cartItems.price;
			temp = temp->next;
		}
		return totalPrice;
	}

	void cleartheCart(){
		while(head != NULL){
			CustomerItems* temp = head;
			head = head->next;
			delete temp;
  		}
		std::cout << "Your cart is now empty.\n";
	}
};

void pressContinue();
int getOption();
void displayProducts(StoreItems* storeItems, int numItems);	//Function to display store products
void selectAdd(CustomerCart* cart, StoreItems* storeItems, int numItems);
void selectRemove(CustomerCart* cart, StoreItems* storeItems, int numTimes);
void checkOut(CustomerCart* cart);

int main(){

	CustomerCart* cart = new CustomerCart;
	int numItems = 18;

	//Initialize the store products
	//Figure 1. Struct array declared but no initialization. Item data takes default values
StoreItems storeItems[numItems] = {
    {1, "Apple", "Fruits", 15},
    {2, "Banana", "Fruits", 10},
    {3, "Bread", "Bakery", 60},
    {4, "Chiken", "Meat", 200},
    {5, "Rice", "Grains", 19.05},
    {6, "Potatos", "Grains", 79},
    {7, "Tomatoes", "Vegetables", 79},
    {8, "Spinach", "Vegetables", 89},
    {9, "Carrots", "Vegetables", 79},
    {10, "Onions", "Vegetables", 79},
    {11, "Cheese", "Dairy", 139},
    {12, "Yogart", "Dairy", 33},
    {13, "Milk", "Dairy", 80},
    {14, "Eggs", "Dairy", 9},
    {15, "Pasta", "Pasta & Noodles", 129},
    {16, "Salt", "Condiments", 29},
    {17, "Sugar", "Sweeteners", 29},
    {18, "Pepper", "Spices", 35}
};
    //Figure 2. Created new StoreItems with initalized values, then assigns it to each index.
	
	int option;

	do{
		displayProducts(storeItems, numItems);
		
		std::cout << "[1] - Add item to cart\n"
				  << "[2] - Remove item from cart\n"
				  << "[3] - View cart\n"
				  << "[4] - Check out\n"
				  << "[5] - Exit\n\n"
				  << "Enter option: ";
		option = getOption();

		switch(option){
		case 1:
			selectAdd(cart, storeItems, numItems);
			pressContinue();
			break;
		case 2:
			system("cls");
			selectRemove(cart, storeItems, numItems);
			pressContinue();
			break;
		case 3:
			system("cls");
			cart->viewCart();
			pressContinue();
			break;
		case 4:
			system("cls");
			checkOut(cart);
			pressContinue();
			break;
		case 5:
			system("cls");
			std::cout << "Thank you for shopping with us. Please come again!\n\n";
			std::cout << "GROUP A\n"
					  << "Agustin, Keanu\n"
					  << "Imperial, Jacqueline\n"
					  << "Joaquin, Arkinne Yuel\n"
					  << "Llarvers, John Kaiser\n"
					  << "Saavedra, Clarence Vance\n"
					  << "Santos, Jericho\n";
			return 0;
		default:
			system("cls");
			std::cout << "Invalid input.\n";
		}
	}while(true);
	
	return 0;
}

void pressContinue(){
	std::cout << "Press any key to continue...\n";
    std::cin.get();
	system("cls");
}

int getOption(){
	std::string inputOption;
	int option;
	do{
		std::getline(std::cin, inputOption);

		std::stringstream ss(inputOption);
		if (ss >> option) { // Conversion successful
			// Check if there are any trailing characters after the integer
			char remaining;
			if (ss >> remaining) {
				std::cout << "\x1b[1A";
    			std::cout << "\x1b[2K";
				std::cerr << "Invalid input. Please enter only an integer.\n"
						  << "Enter again: ";
			} 
			else {
				if(option < 1){
					std::cerr << "Invalid input. Please enter only a positive integer.\n"
						  	  << "Enter again: ";
				}
				else{
					return option;
				}
			}
		} 
		else { // Conversion failed
			std::cout << "\x1b[1A";
    		std::cout << "\x1b[2K";
			std::cerr << "Invalid input. Please enter only an integer.\n"
					  << "Enter again: ";
		}
	}while(true);
}

void displayProducts(StoreItems* storeItems, int numItems) {
    std::cout << std::setw(4) << "Item # | " << std::setw(21) << std::left << "Category" << "|" << std::setw(20) << std::left << "Item Name" << " | " << "Price\n";
    std::cout << std::setfill('=') << std::setw(65) << "=" << std::setfill(' ') << '\n';

    for (int i = 0; i < numItems; i++) {
        std::cout << std::setw(6) << std::right << i + 1 << " | " <<std::setw(21) << std::left << storeItems[i].category << "|" << std::setw(20) << std::left << storeItems[i].itemName << " | " << storeItems[i].price << '\n';
    }
    std::cout << '\n';
}

void selectAdd(CustomerCart* cart, StoreItems* storeItems, int numItems){
	
	do{
		std::cout << "Select item # to add to cart: \n";
		int itemNumber = getOption();
		if(itemNumber > StoreItems::storeNumItems){
			system("cls");
			displayProducts(storeItems, numItems);
			std::cout << "Item number do not exist. Enter again.\n";
		}
		else{
			cart->addToCart(&storeItems[itemNumber - 1]);
			system("cls");
			std::cout << "Add success!\n";
			break;
		}
	}while(true);
	
}

void selectRemove(CustomerCart* cart, StoreItems* storeItems, int numItems){
	do{
		cart->viewCart();
		std::cout << "Select item # to remove from cart: \n";
		int itemNumber = getOption();
		if(itemNumber > CustomerItems::counter || itemNumber < 1){
			system("cls");
			std::cout << "Item number do not exist. Enter again.\n";
		}
		else{
			system("cls");
			cart->removeFromCart(itemNumber);
			cart->viewCart();
			break;
		}
	}while(true);
}

void checkOut(CustomerCart* cart){
	double totalPrice = cart->computeTotal();
	std::cout << "Your total is $" << totalPrice << '\n';
	cart->cleartheCart();
}

